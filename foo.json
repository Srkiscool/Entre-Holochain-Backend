{
    "%dna": {
        "header": {
            "type": "%dna",
            "signature": "{[70 253 185 102 20 53 89 92 172 146 184 65 174 20 151 147 143 86 101 133 110 183 216 1 204 11 135 117 225 30 248 144 109 26 251 107 57 2 133 0 78 170 238 161 238 208 88 40 148 112 153 17 219 183 185 107 202 33 193 58 225 133 60 9]}",
            "hash": "QmT2TGMEcKjmPsxtfPERKafpKqd5LERbKURuQrRGdBQcyy",
            "time": "2018-11-03 16:33:36.28766595 -0400 EDT",
            "nextHeader": "",
            "next": "%dna: ",
            "entry": "QmdEzsjsxHRhpjVjPdK38D6wPhVs7k3vzSmWrnypCXw6Ar"
        },
        "content": {
            "Version": 1,
            "UUID": "e51e1303-6729-4b95-b710-df967e6a15d5",
            "Name": "entre",
            "Properties": {
                "description": "Social network for Entreprenuers ",
                "language": "en"
            },
            "PropertiesSchema": "",
            "PropertiesSchemaFile": "",
            "AgentIdentitySchema": "",
            "BasedOn": "",
            "RequiresVersion": 0,
            "DHTConfig": {
                "HashType": "sha2-256",
                "RedundancyFactor": 0
            },
            "Progenitor": {
                "Identity": "",
                "PubKey": null
            },
            "Zomes": [
                {
                    "Name": "members",
                    "Description": "track member info and rep",
                    "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\nfunction anchor(anchorType, anchorText) {\n  return call('anchors', 'anchor', {\n    anchorType: anchorType,\n    anchorText: anchorText\n  }).replace(/\"/g, '');\n}\n\nfunction handleHash(appKeyHash) {\n  // debug('appKeyHash ' + appKeyHash)\n  if (appKeyHash === undefined) {\n    appKeyHash = App.Key.Hash;\n  }\n  return getLinks(appKeyHash, 'handle', { Load: true })[0].Entry.replace(\n    /\"/g,\n    ''\n  );\n}\n//nondestructive lookup\nfunction anchorExists(anchorType, anchorText) {\n  return call('anchors', 'exists', {\n    anchorType: anchorType,\n    anchorText: anchorText\n  });\n}\n\n\n\nfunction ProfileCreate (ProfileEntry) {\n  if(anchorExists(\"user\",ProfileEntry.username))\n  {\n    debug(\"username already exists \")\n  }\n  else\n  {\n    anchor(\"user\",ProfileEntry.username)\n  }\n  var ProfileHash = commit(\"Profile\", ProfileEntry);\n  return ProfileHash;\n}\n\nfunction ProfileRead (ProfileHash) {\n  var Profile = get(ProfileHash);\n  return Profile;\n}\n\nfunction ProfileUpdate (ProfileHash) {\n  var sampleValue={\"username\":\"kitty\",\"firstName\":\"Cathy\",\"lastName\":\"Jerry\",\"phone\":\"911\",\"bio\":\"likes cat food and mice.\",\"extraField\":true};\n  var ProfileOutHash = update(\"Profile\", sampleValue, ProfileHash);\n  return ProfileOutHash;\n}\n\nfunction ProfileDelete (ProfileHash) {\n  var result = remove(ProfileHash, \"\");\n  return result;\n}\n\nfunction listPosts (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listLikes (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listFlags (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}\n",
                    "Entries": [
                        {
                            "Name": "Profile",
                            "DataFormat": "json",
                            "Sharing": "public",
                            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"username\",\n    \"firstName\",\n    \"lastName\",\n    \"phone\",\n    \"bio\"\n  ],\n  \"properties\": {\n    \"username\": {\n      \"$id\": \"#/properties/username\",\n      \"type\": \"string\",\n      \"title\": \"The Username Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"kitty\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"firstName\": {\n      \"$id\": \"#/properties/firstName\",\n      \"type\": \"string\",\n      \"title\": \"The Firstname Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Cathy\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"lastName\": {\n      \"$id\": \"#/properties/lastName\",\n      \"type\": \"string\",\n      \"title\": \"The Lastname Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Jerry\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"phone\": {\n      \"$id\": \"#/properties/phone\",\n      \"type\": \"string\",\n      \"title\": \"The Phone Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"911\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"bio\": {\n      \"$id\": \"#/properties/bio\",\n      \"type\": \"string\",\n      \"title\": \"The Bio Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"likes cat food and mice.\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}"
                        },
                        {
                            "Name": "memberPosts",
                            "DataFormat": "links",
                            "Sharing": "public",
                            "Schema": ""
                        },
                        {
                            "Name": "memberLikes",
                            "DataFormat": "links",
                            "Sharing": "public",
                            "Schema": ""
                        },
                        {
                            "Name": "memberFlags",
                            "DataFormat": "links",
                            "Sharing": "public",
                            "Schema": ""
                        }
                    ],
                    "RibosomeType": "js",
                    "Functions": [
                        {
                            "Name": "ProfileCreate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "ProfileRead",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "ProfileUpdate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "ProfileDelete",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listPosts",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listLikes",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listFlags",
                            "CallingType": "json",
                            "Exposure": "public"
                        }
                    ],
                    "BridgeFuncs": null,
                    "Config": null
                },
                {
                    "Name": "posts",
                    "Description": "see posts",
                    "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction postCreate (postEntry) {\n  var postHash = commit(\"post\", postEntry);\n  return postHash;\n}\n\nfunction postRead (postHash) {\n  var post = get(postHash);\n  return post;\n}\n\nfunction postUpdate (postHash) {\n  var sampleValue={\"checked\":true,\"dimensions\":{\"width\":5,\"height\":10},\"id\":1,\"name\":\"A green door\",\"price\":12.5,\"tags\":[\"home\"],\"extraField\":true};\n  var postOutHash = update(\"post\", sampleValue, postHash);\n  return postOutHash;\n}\n\nfunction postDelete (postHash) {\n  var result = remove(postHash, \"\");\n  return result;\n}\n\nfunction listTagged (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listFlagged (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return true;\n    default:\n      // invalid entry name\n      return true;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}",
                    "Entries": [
                        {
                            "Name": "post",
                            "DataFormat": "json",
                            "Sharing": "public",
                            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"checked\",\n    \"dimensions\",\n    \"id\",\n    \"name\",\n    \"price\",\n    \"tags\"\n  ],\n  \"properties\": {\n    \"checked\": {\n      \"$id\": \"/properties/checked\",\n      \"type\": \"boolean\",\n      \"title\": \"The Checked Schema\",\n      \"default\": false,\n      \"examples\": [\n        false\n      ]\n    },\n    \"dimensions\": {\n      \"$id\": \"/properties/dimensions\",\n      \"type\": \"object\",\n      \"title\": \"The Dimensions Schema\",\n      \"required\": [\n        \"width\",\n        \"height\"\n      ],\n      \"properties\": {\n        \"width\": {\n          \"$id\": \"/properties/dimensions/properties/width\",\n          \"type\": \"integer\",\n          \"title\": \"The Width Schema\",\n          \"default\": 0,\n          \"examples\": [\n            5\n          ]\n        },\n        \"height\": {\n          \"$id\": \"/properties/dimensions/properties/height\",\n          \"type\": \"integer\",\n          \"title\": \"The Height Schema\",\n          \"default\": 0,\n          \"examples\": [\n            10\n          ]\n        }\n      }\n    },\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        1\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"A green door\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"price\": {\n      \"$id\": \"/properties/price\",\n      \"type\": \"number\",\n      \"title\": \"The Price Schema\",\n      \"default\": 0,\n      \"examples\": [\n        12.5\n      ]\n    },\n    \"tags\": {\n      \"$id\": \"/properties/tags\",\n      \"type\": \"array\",\n      \"title\": \"The Tags Schema\",\n      \"items\": {\n        \"$id\": \"/properties/tags/items\",\n        \"type\": \"string\",\n        \"title\": \"The 0 Schema\",\n        \"default\": \"\",\n        \"examples\": [\n          \"home\",\n          \"green\"\n        ],\n        \"pattern\": \"^(.*)$\"\n      }\n    }\n  }\n}"
                        }
                    ],
                    "RibosomeType": "js",
                    "Functions": [
                        {
                            "Name": "postCreate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "postRead",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "postUpdate",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "postDelete",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listTagged",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "listFlagged",
                            "CallingType": "json",
                            "Exposure": "public"
                        }
                    ],
                    "BridgeFuncs": null,
                    "Config": null
                },
                {
                    "Name": "anchors",
                    "Description": "anchors mixin",
                    "Code": "function anchor(anchor){\n  var anchorType = {anchorType: anchor.anchorType, anchorText: ''};\n  var rootAnchortype =  {anchorType: 'anchorTypes', anchorText: ''};\n  var anchorHash = makeHash('anchor', anchor);\n  var anchorGet = get(anchorHash);\n  debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Check to see if ' + anchor.anchorText + ' exists\u003c/mermaid\u003e');\n  // debug('anchorGet ' + JSON.stringify(anchorGet));\n  if(anchorGet === null){\n    var anchorType = {anchorType: anchor.anchorType, anchorText: ''};\n    var rootAnchortype =  {anchorType: 'anchorTypes', anchorText: ''};\n    var anchorTypeGet = get(makeHash('anchor', anchorType));\n    debug('anchorTypeGet ' + JSON.stringify(anchorTypeGet));\n    debug('\u003cmermaid\u003e' + App.Agent.String + '--\u003e\u003eDHT:Check to see if ' + anchor.anchorType + ' has been setup\u003c/mermaid\u003e');\n    if(anchorTypeGet === null){\n      var rootAnchorTypeHash = makeHash('anchor', rootAnchortype);\n      debug('\u003cmermaid\u003e' + App.Agent.String + '--\u003e\u003eDHT:Check to see if the Root of all anchors has been setup\u003c/mermaid\u003e');\n      if (get(rootAnchorTypeHash) === null){\n        rootAnchorTypeHash = commit('anchor', rootAnchortype);\n        debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003e' + App.Agent.String + ':commit Root of all anchors to local chain\u003c/mermaid\u003e');\n        debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Publish Root of all anchors\u003c/mermaid\u003e');\n        // debug('Root Anchor Type Created: ' + rootAnchorTypeHash)\n      }\n      debug('\u003cmermaid\u003eDHT--\u003e\u003e' + App.Agent.String + ':Return the Root Anchor Type\u003c/mermaid\u003e');\n      var anchorTypeHash = commit('anchor', anchorType);\n      debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003e' + App.Agent.String + ':commit ' + anchor.anchorType + ' to local chain\u003c/mermaid\u003e');\n      debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Publish ' + anchor.anchorType + '\u003c/mermaid\u003e');\n      // debug('Anchor Type Created: ' + anchorTypeHash)\n\n      commit('anchor_link', { Links:[{Base: rootAnchorTypeHash, Link: anchorTypeHash, Tag: anchorType.anchorType}]});\n      debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Link ' + anchor.anchorType + ' to Root of all anchors\u003c/mermaid\u003e');\n\n    } else {\n      anchorTypeHash = makeHash('anchor', anchorType);\n      debug('\u003cmermaid\u003eDHT--\u003e\u003e' + App.Agent.String + ':Return the anchorType ' + anchor.anchorType + '\u003c/mermaid\u003e');\n    }\n    anchorHash = commit('anchor', anchor);\n    debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003e' + App.Agent.String + ':commit ' + anchor.anchorText + ' has been setup\u003c/mermaid\u003e');\n    debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Publish ' + anchor.anchorText + '\u003c/mermaid\u003e');\n    // debug('Anchor Created ' + anchorHash)\n    commit('anchor_link',  { Links:[{Base: anchorTypeHash, Link: anchorHash, Tag: anchor.anchorText}]});\n    debug('\u003cmermaid\u003e' + App.Agent.String + '-\u003e\u003eDHT:Link ' + anchor.anchorText + ' to ' + anchorType.anchorType + '\u003c/mermaid\u003e');\n  }\n  debug('\u003cmermaid\u003eDHT--\u003e\u003e' + App.Agent.String + ':Return the anchor ' + anchor.anchorType + ' = ' + anchor.anchorText + '\u003c/mermaid\u003e');\n  return anchorHash;\n}\n\nfunction exists(anchor){\n  debug('\u003cmermaid\u003e' + App.Agent.String + '--\u003e\u003eDHT:Check to see if ' + anchor.anchorText + ' exists\u003c/mermaid\u003e');\n  // debug('does it exist?');\n  // debug(get(makeHash('anchor', anchor)));\n  var key = get(makeHash('anchor', anchor));\n  // debug(key);\n  if(key !== null){\n    debug('\u003cmermaid\u003eDHT--\u003e\u003e' + App.Agent.String + ':' + anchor.anchorText + ' exists\u003c/mermaid\u003e');\n    return true;\n  }\n  debug('\u003cmermaid\u003eDHT--\u003e\u003e' + App.Agent.String + ':' + anchor.anchorText + ' does not exist\u003c/mermaid\u003e');\n  return false;\n}\n\nfunction anchors(type){\n  var links = getLinks(makeHash('anchor', {anchorType: type, anchorText: ''}), '');\n  // debug(links)\n  return links;\n}\n\nfunction genesis() {\n  return true;\n}\n\nfunction validatePut(entry_type,entry,header,pkg,sources) {\n  // debug('Anchors validatePut:' + sources)\n  return validateCommit(entry_type,entry,header,pkg,sources);\n}\nfunction validateCommit(entry_type,entry,header,pkg,sources) {\n  // debug('Anchors validatePut:' + sources)\n    if (entry_type == 'anchor') {\n        return true;\n    }\n    if (entry_type == 'anchor_link') {\n        return true;\n    }\n    return false;\n}\n\n\n\nfunction validateLink(linkingEntryType,baseHash,linkHash,pkg,sources){\n  // debug('Anchors validateLink:' + sources)\n  return true;\n}\nfunction validateMod(entry_type,hash,newHash,pkg,sources){\n  // debug('Anchors validateMod:' + sources)\n  return true;\n}\nfunction validateDel(entry_type,hash,pkg,sources) {\n  // debug('Anchors validateDel:' + sources)\n  return true;\n}\nfunction validatePutPkg(entry_type) {\n  // debug('Anchors validatePutPkg')\n  return null;\n}\nfunction validateModPkg(entry_type) {\n  // debug('Anchors validateModPkg')\n  return null;\n}\nfunction validateDelPkg(entry_type) {\n  // debug('Anchors validateDelPkg')\n  return null;\n}\nfunction validateLinkPkg(entry_type) {\n  // debug('Anchors validateLinkPkg')\n  return null;\n}\n",
                    "Entries": [
                        {
                            "Name": "anchor",
                            "DataFormat": "json",
                            "Sharing": "public",
                            "Schema": "{\n  \"title\": \"Anchor Schema\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"anchorType\": {\n      \"type\": \"string\"\n    },\n    \"anchorText\": {\n      \"type\": \"string\"\n    }\n  },\n    \"required\": [\"anchorType\"]\n}\n"
                        },
                        {
                            "Name": "anchor_link",
                            "DataFormat": "links",
                            "Sharing": "",
                            "Schema": ""
                        }
                    ],
                    "RibosomeType": "js",
                    "Functions": [
                        {
                            "Name": "anchor",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "exists",
                            "CallingType": "json",
                            "Exposure": "public"
                        },
                        {
                            "Name": "anchors",
                            "CallingType": "string",
                            "Exposure": "public"
                        }
                    ],
                    "BridgeFuncs": null,
                    "Config": {
                        "ErrorHandling": "throwErrors"
                    }
                }
            ]
        }
    },
    "%agent": {
        "header": {
            "type": "%agent",
            "signature": "{[16 253 162 254 224 133 75 107 89 60 174 207 183 228 20 141 59 49 165 108 24 167 56 198 215 244 110 219 29 245 184 7 214 191 250 223 7 213 112 48 39 25 216 33 241 235 63 113 166 142 225 85 147 85 245 252 147 16 198 32 154 209 52 11]}",
            "hash": "QmV7cnQh4PWPDLcUYDa8ev3tmmYLuLjbgjUsvD4T1H668t",
            "time": "2018-11-03 16:33:36.288197383 -0400 EDT",
            "nextHeader": "QmT2TGMEcKjmPsxtfPERKafpKqd5LERbKURuQrRGdBQcyy",
            "next": "%agent: ",
            "entry": "QmQ3RDGxJ2pNSUjU52pGydybgGET1UmzHjrhmh7XiMmwB3"
        },
        "content": "{\"Identity\":\"skalva@andrew.cmu.edu\",\"Revocation\":\"\",\"PublicKey\":\"4XTTM6pABGUxYLW7gPkYFTv9Kr9Z5PTwbXNYXm4qq3Siuwex8\"}"
    },
    "entries": [
        {
            "header": {
                "type": "Profile",
                "signature": "{[65 93 14 171 123 226 20 164 104 122 105 3 143 234 151 234 144 51 75 239 198 54 215 130 190 32 220 137 124 65 6 201 63 216 135 226 150 237 210 154 127 4 240 46 77 149 255 154 169 60 231 4 151 6 64 92 79 58 192 205 170 225 102 7]}",
                "hash": "Qmf7fm7FRrhJNs9pSz2Yhob4p1HgqhqVWYM4r5Pe9H8Rbc",
                "time": "2018-11-03 16:37:48.178962983 -0400 EDT",
                "nextHeader": "QmV7cnQh4PWPDLcUYDa8ev3tmmYLuLjbgjUsvD4T1H668t",
                "next": "Profile: ",
                "entry": "Qmf3jryuTrurf7SiMNwxTNa5H1jCt7SWwBw2jZMN5aqns5"
            },
            "content": "{\"bio\":\"likes cat food and mice.\",\"firstName\":\"Cathy\",\"lastName\":\"Jerry\",\"phone\":\"911\",\"username\":\"kitty\"}"
        }
    ]
}
