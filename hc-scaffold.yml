{
  # This is a holochain scaffold yaml definition. http://ceptr.org/projects/holochain

  # DNA File Version
  # Version indicator for changes to DNA
  "Version": "0.0.1",
  "Generator": "hc-scaffold:0.1.0+e8a394b",

  # Application DNA
  # The DNA specifies the entry structure and functions and configuration of your application
  "DNA": {

    # DNA File Version
    # Version indicator for changes to DNA
    "Version": 1,

    # DNA Unique ID
    # This ID differentiates your app from others. For example, to tell one Slack team from another which same code.
    "UUID": "e51e1303-6729-4b95-b710-df967e6a15d5",

    # Application Name
    # What would you like to call your holochain app?
    "Name": "entre",

    # Properties
    # Properties that you want available across all Zomes.
    "Properties": {

      # Application Description
      # Briefly describe your holochain app.
      "description": "Social network for Entreprenuers ",

      # Language
      # The base (human) language of this holochain app.
      "language": "en"
    },

    # Properties Schema File
    # Describes the entries in the Properties section of your dna file.
    "PropertiesSchemaFile": "properties_schema.json",

    # DHT Settings
    # Configure the properties of your Distributed Hash Table (e.g. hash algorithm, neighborhood size, etc.).
    "DHTConfig": {
      "HashType": "sha2-256"
    },

    # Zomes
    # List the Zomes your application will support.
    "Zomes": [
      {

        # Zome Name
        # The name of this code module.
        "Name": "members",

        # Zome Description
        # What is the purpose of this module?
        "Description": "track member info and rep",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "members.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "Profile", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/root.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"username\",\n    \"firstName\",\n    \"lastName\",\n    \"phone\",\n    \"bio\"\n  ],\n  \"properties\": {\n    \"username\": {\n      \"$id\": \"#/properties/username\",\n      \"type\": \"string\",\n      \"title\": \"The Username Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"kitty\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"firstName\": {\n      \"$id\": \"#/properties/firstName\",\n      \"type\": \"string\",\n      \"title\": \"The Firstname Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Cathy\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"lastName\": {\n      \"$id\": \"#/properties/lastName\",\n      \"type\": \"string\",\n      \"title\": \"The Lastname Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"Jerry\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"phone\": {\n      \"$id\": \"#/properties/phone\",\n      \"type\": \"string\",\n      \"title\": \"The Phone Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"911\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"bio\": {\n      \"$id\": \"#/properties/bio\",\n      \"type\": \"string\",\n      \"title\": \"The Bio Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"likes cat food and mice.\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    }\n  }\n}",
            "_": "crud"
          },
          {
            "Name": "memberPosts", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "memberLikes", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          },
          {
            "Name": "memberFlags", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "links", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "_": "-"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "ProfileCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:Profile"
          },
          {
            "Name": "ProfileRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:Profile"
          },
          {
            "Name": "ProfileUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:Profile"
          },
          {
            "Name": "ProfileDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:Profile"
          },
          {
            "Name": "listPosts", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "listLikes", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "listFlags", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction ProfileCreate (ProfileEntry) {\n  var ProfileHash = commit(\"Profile\", ProfileEntry);\n  return ProfileHash;\n}\n\nfunction ProfileRead (ProfileHash) {\n  var Profile = get(ProfileHash);\n  return Profile;\n}\n\nfunction ProfileUpdate (ProfileHash) {\n  var sampleValue={\"username\":\"kitty\",\"firstName\":\"Cathy\",\"lastName\":\"Jerry\",\"phone\":\"911\",\"bio\":\"likes cat food and mice.\",\"extraField\":true};\n  var ProfileOutHash = update(\"Profile\", sampleValue, ProfileHash);\n  return ProfileOutHash;\n}\n\nfunction ProfileDelete (ProfileHash) {\n  var result = remove(ProfileHash, \"\");\n  return result;\n}\n\nfunction listPosts (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listLikes (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listFlags (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"Profile\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberPosts\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberLikes\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    case \"memberFlags\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "posts",

        # Zome Description
        # What is the purpose of this module?
        "Description": "see posts",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "posts.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [
          {
            "Name": "post", # The name of this entry.
            "Required": true, # Is this entry required?
            "DataFormat": "json", # What type of data should this entry store?
            "Sharing": "public", # Should this entry be publicly accessible?
            "Schema": "{\n  \"definitions\": {},\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"$id\": \"http://example.com/example.json\",\n  \"type\": \"object\",\n  \"title\": \"The Root Schema\",\n  \"required\": [\n    \"checked\",\n    \"dimensions\",\n    \"id\",\n    \"name\",\n    \"price\",\n    \"tags\"\n  ],\n  \"properties\": {\n    \"checked\": {\n      \"$id\": \"/properties/checked\",\n      \"type\": \"boolean\",\n      \"title\": \"The Checked Schema\",\n      \"default\": false,\n      \"examples\": [\n        false\n      ]\n    },\n    \"dimensions\": {\n      \"$id\": \"/properties/dimensions\",\n      \"type\": \"object\",\n      \"title\": \"The Dimensions Schema\",\n      \"required\": [\n        \"width\",\n        \"height\"\n      ],\n      \"properties\": {\n        \"width\": {\n          \"$id\": \"/properties/dimensions/properties/width\",\n          \"type\": \"integer\",\n          \"title\": \"The Width Schema\",\n          \"default\": 0,\n          \"examples\": [\n            5\n          ]\n        },\n        \"height\": {\n          \"$id\": \"/properties/dimensions/properties/height\",\n          \"type\": \"integer\",\n          \"title\": \"The Height Schema\",\n          \"default\": 0,\n          \"examples\": [\n            10\n          ]\n        }\n      }\n    },\n    \"id\": {\n      \"$id\": \"/properties/id\",\n      \"type\": \"integer\",\n      \"title\": \"The Id Schema\",\n      \"default\": 0,\n      \"examples\": [\n        1\n      ]\n    },\n    \"name\": {\n      \"$id\": \"/properties/name\",\n      \"type\": \"string\",\n      \"title\": \"The Name Schema\",\n      \"default\": \"\",\n      \"examples\": [\n        \"A green door\"\n      ],\n      \"pattern\": \"^(.*)$\"\n    },\n    \"price\": {\n      \"$id\": \"/properties/price\",\n      \"type\": \"number\",\n      \"title\": \"The Price Schema\",\n      \"default\": 0,\n      \"examples\": [\n        12.5\n      ]\n    },\n    \"tags\": {\n      \"$id\": \"/properties/tags\",\n      \"type\": \"array\",\n      \"title\": \"The Tags Schema\",\n      \"items\": {\n        \"$id\": \"/properties/tags/items\",\n        \"type\": \"string\",\n        \"title\": \"The 0 Schema\",\n        \"default\": \"\",\n        \"examples\": [\n          \"home\",\n          \"green\"\n        ],\n        \"pattern\": \"^(.*)$\"\n      }\n    }\n  }\n}",
            "_": "crud"
          }
        ],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [
          {
            "Name": "postCreate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "c:post"
          },
          {
            "Name": "postRead", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "r:post"
          },
          {
            "Name": "postUpdate", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "u:post"
          },
          {
            "Name": "postDelete", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
            "_": "d:post"
          },
          {
            "Name": "listTagged", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          },
          {
            "Name": "listFlagged", # The name of this function.
            "CallingType": "json", # Data format for parameters passed to this function.
            "Exposure": "public", # Level to which is this function exposed.
          }
        ],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\nfunction postCreate (postEntry) {\n  var postHash = commit(\"post\", postEntry);\n  return postHash;\n}\n\nfunction postRead (postHash) {\n  var post = get(postHash);\n  return post;\n}\n\nfunction postUpdate (postHash) {\n  var sampleValue={\"checked\":false,\"dimensions\":{\"width\":5,\"height\":10},\"id\":1,\"name\":\"A green door\",\"price\":12.5,\"tags\":[\"home\"],\"extraField\":true};\n  var postOutHash = update(\"post\", sampleValue, postHash);\n  return postOutHash;\n}\n\nfunction postDelete (postHash) {\n  var result = remove(postHash, \"\");\n  return result;\n}\n\nfunction listTagged (params) {\n  // your custom code here\n  return {};\n}\n\nfunction listFlagged (params) {\n  // your custom code here\n  return {};\n}\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    case \"post\":\n      // be sure to consider many edge cases for validating\n      // do not just flip this to true without considering what that means\n      // the action will ONLY be successfull if this returns true, so watch out!\n      return false;\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      },
      {

        # Zome Name
        # The name of this code module.
        "Name": "anchors",

        # Zome Description
        # What is the purpose of this module?
        "Description": "",

        # Ribosome Type
        # What scripting language will you code in?
        "RibosomeType": "js",

        # Code File
        # Points to the main script file for this Zome.
        "CodeFile": "anchors.js",

        # Zome Entries
        # Data stored and tracked by your Zome.
        "Entries": [],

        # Zome Functions
        # Functions which can be called in your Zome's API.
        "Functions": [],

        # Zome Source Code
        # The logic that will control Zome behavior
        "Code": "'use strict';\n\n// -----------------------------------------------------------------\n//  This stub Zome code file was auto-generated by hc-scaffold\n// -----------------------------------------------------------------\n\n// -----------------------------------------------------------------\n//  Exposed functions with custom logic https://developer.holochain.org/API_reference\n// -----------------------------------------------------------------\n\n\n// -----------------------------------------------------------------\n//  The Genesis Function https://developer.holochain.org/genesis\n// -----------------------------------------------------------------\n\n/**\n * Called only when your source chain is generated\n * @return {boolean} success\n */\nfunction genesis () {\n  return true;\n}\n\n// -----------------------------------------------------------------\n//  Validation functions for every change to the local chain or DHT\n// -----------------------------------------------------------------\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateCommit (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validatePut (entryName, entry, header, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {*} entry - the entry data to be set\n * @param {object} header - header for the entry containing properties EntryLink, Time, and Type\n * @param {string} replaces - the hash for the entry being updated\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateMod (entryName, entry, header, replaces, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} hash - the hash of the entry to remove\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateDel (entryName, hash, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to validate any changes to the local chain or DHT\n * @param {string} entryName - the type of entry\n * @param {string} baseHash - the hash of the base entry being linked\n * @param {?} links - ?\n * @param {*} pkg - the extra data provided by the validate[X]Pkg methods\n * @param {object} sources - an array of strings containing the keys of any authors of this entry\n * @return {boolean} is valid?\n */\nfunction validateLink (entryName, baseHash, links, pkg, sources) {\n  switch (entryName) {\n    default:\n      // invalid entry name\n      return false;\n  }\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validatePutPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateModPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateDelPkg (entryName) {\n  return null;\n}\n\n/**\n * Called to get the data needed to validate\n * @param {string} entryName - the name of entry to validate\n * @return {*} the data required for validation\n */\nfunction validateLinkPkg (entryName) {\n  return null;\n}"
      }
    ]
  },

  # TestSets
  # Auto-Generated test sets for hcdev package
  "TestSets": [
    {

      # Name
      # Name of the Test Set
      "Name": "members",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for ProfileCreate",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "ProfileCreate",

            # Input
            # Input sent to the function
            "Input": {
              "username": "kitty",
              "firstName": "Cathy",
              "lastName": "Jerry",
              "phone": "911",
              "bio": "likes cat food and mice."
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for ProfileRead",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "ProfileRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "username": "kitty",
              "firstName": "Cathy",
              "lastName": "Jerry",
              "phone": "911",
              "bio": "likes cat food and mice."
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for ProfileUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "ProfileUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for ProfileDelete",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "ProfileDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listPosts",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "listPosts",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listLikes",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "listLikes",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listFlags",

            # Zome
            # The zome this test is related to
            "Zome": "members",

            # Function Name
            # The function to test
            "FnName": "listFlags",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    },
    {

      # Name
      # Name of the Test Set
      "Name": "posts",
      "TestSet": {
        "Tests": [
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postCreate",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postCreate",

            # Input
            # Input sent to the function
            "Input": {
              "checked": false,
              "dimensions": {
                "width": 5,
                "height": 10
              },
              "id": 1,
              "name": "A green door",
              "price": 12.5,
              "tags": [
                "home"
              ]
            },

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postRead",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postRead",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": {
              "checked": false,
              "dimensions": {
                "width": 5,
                "height": 10
              },
              "id": 1,
              "name": "A green door",
              "price": 12.5,
              "tags": [
                "home"
              ]
            }
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postUpdate",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postUpdate",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for postDelete",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "postDelete",

            # Input
            # Input sent to the function
            "Input": "%h%",

            # Output
            # Output from the function to validate
            "Output": "%h%"
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listTagged",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "listTagged",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          },
          {

            # Convey
            # Description of this test
            "Convey": "auto-generated test for listFlagged",

            # Zome
            # The zome this test is related to
            "Zome": "posts",

            # Function Name
            # The function to test
            "FnName": "listFlagged",

            # Input
            # Input sent to the function
            "Input": "",

            # Output
            # Output from the function to validate
            "Output": {}
          }
        ]
      }
    }
  ]
}